#pragma once

#include <vector>
#include <grpcpp/grpcpp.h>

// autogenerated
#include "send_array.grpc.pb.h"

#include "types_lookup.hpp"


namespace send_array {

template<typename GrpcType>
class ServiceImpl final: public GrpcType::Service {
    private:
        using data_type = typename TypesLookup<GrpcType>::data_type;
        using repeated_type = typename TypesLookup<GrpcType>::repeated_type;

        std::vector<std::vector<data_type>> data__;
        typename std::vector<std::vector<data_type>>::iterator data_iterator__;

    public:
        grpc::Status PopulateArray(
            grpc::ServerContext* context,
            const repeated_type *request,
            Empty *response
        ) override {
            // new_array = std::vector<data_type>(request->payload_size());
            data__.emplace_back(request->payload().cbegin(), request->payload().cend());
            for( auto vec: data__){
                for( auto val: vec) {
                    std::cout << val << ", ";
                }
                std::cout << std::endl;
            }
            return grpc::Status::OK;
        }

        grpc::Status ClearArrays(
            grpc::ServerContext* context,
            const Empty *request,
            Empty *response
        ) override {
            data__.clear();
            data_iterator__ = data__.begin();
            return grpc::Status::OK;
        }
};

} // end namespace send_array
