/*
 *
 * Copyright 2015 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <iostream>
#include <memory>
#include <string>

#include <grpcpp/grpcpp.h>

// autogenerated
#include "chunkdemo.grpc.pb.h"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::Status;
using grpc::ServerWriter;

using chunkdemo::ChunkDemo;
using chunkdemo::Chunk;
using chunkdemo::StreamRequest;
using chunkdemo::DataType;


// stream a series of chunks 
inline void StreamChunks(ServerWriter<Chunk>* writer, int chunk_size,
			 const void* array, int n_bytes,
			 const char* array_name, DataType vtype)
{
  char* bytes = (char*) array;
    
  Chunk chunk;
  chunk.set_array_name(array_name);
  chunk.set_value_type(vtype);
  chunk.set_size(n_bytes);
  for (int c = 0; c < n_bytes; c += chunk_size) {
    if (c + chunk_size > n_bytes) {
      chunk.set_payload(&bytes[c], n_bytes - c);
      writer->Write(chunk);
    }
    else {
      chunk.set_payload(&bytes[c], chunk_size);
      writer->Write(chunk);
    }	
  }
}


// Logic and data behind the server's behavior.
class ChunkServiceImpl final : public ChunkDemo::Service {
  Status DownloadArray(ServerContext* context, const StreamRequest* request,
		       ServerWriter<Chunk>* writer) override {

    DataType vtype = DataType::INTEGER;

    // fill an array with values
    int n = this->GetMetadataValue<int>(context, "arr_sz", 10000);
    int *array = new int[n];
    for (int i=0; i<n; i++){
      array[i] = i;
    }

    int chunk_size = 256;

    int n_bytes = sizeof(int)*n;
    StreamChunks(writer, chunk_size, array, n_bytes, "DemoArray", vtype);

    return Status::OK;
  }
};



void RunServer() {
  std::string server_address("0.0.0.0:50000");
  ChunkServiceImpl service;

  ServerBuilder builder;
  // Listen on the given address without any authentication mechanism.
  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
  // Register "service" as the instance through which we'll communicate with
  // clients. In this case it corresponds to an *synchronous* service.
  builder.RegisterService(&service);
  // Finally assemble the server.
  std::unique_ptr<Server> server(builder.BuildAndStart());
  std::cout << "Server listening on " << server_address << std::endl;

  // Wait for the server to shutdown. Note that some other thread must be
  // responsible for shutting down the server for this call to ever return.
  server->Wait();
}

int main(int argc, char** argv) {
  RunServer();
  return 0;
}
