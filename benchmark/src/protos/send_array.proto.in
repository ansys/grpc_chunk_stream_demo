// Demonstrates the serialization of an array from server to client
// using gRPC

syntax = "proto3";
package send_array;

message Empty {}

message BinaryChunk{
  bytes payload = 1;
}

message StreamRequest{
  int32 chunk_size = 1;
}

{% for dtype, _ in data_types %}
// Section {{ dtype | upper }}

message Repeated{{ dtype | capitalize }}{
  repeated {{ dtype }} payload = 1;
}

message {{ dtype | capitalize }}{
  {{ dtype }} payload = 1;
}

service SendArray{{ dtype | capitalize }}{
  // Create an array within the server
  rpc PopulateArray(Repeated{{ dtype | capitalize }}) returns (Empty);

  // Delete all arrays on the server
  rpc ClearArrays(Empty) returns (Empty);

  // Send the array to the client using repeated items
  rpc DownloadArray(Empty) returns (Repeated{{ dtype | capitalize }});

  // Send an array by combining streaming and repeated items
  rpc DownloadArrayChunked(StreamRequest) returns (stream Repeated{{ dtype | capitalize }});

  // Send an array as a simple stream of messages
  rpc DownloadArrayStreaming(Empty) returns (stream {{ dtype | capitalize }});

  // Send a stream of byte payloads containing the array
  rpc DownloadArrayBinaryChunked(StreamRequest) returns (stream BinaryChunk);
}

// End Section {{ dtype | upper }}

{% endfor %}
