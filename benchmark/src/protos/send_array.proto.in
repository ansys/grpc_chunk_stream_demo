// Demonstrates the serialization of an array from server to client
// using gRPC

syntax = "proto3";
package send_array;

message Empty {
}

message ArrayID {
  int32 value = 1;
}

message BinaryChunk{
  bytes payload = 1;
}

message StreamRequest{
  ArrayID array_id = 1;
  int32 chunk_size = 2;
}

{% for dtype, _ in data_types %}
// Section {{ dtype | upper }}

message Repeated{{ dtype | capitalize }}{
  repeated {{ dtype }} payload = 1;
}

message {{ dtype | capitalize }}{
  {{ dtype }} payload = 1;
}

service ArrayService{{ dtype | capitalize }}{
  // Create an array within the server
  rpc PostArray(Repeated{{ dtype | capitalize }}) returns (ArrayID);

  // Delete all arrays on the server
  rpc DeleteArray(ArrayID) returns (Empty);

  // Send the array to the client using repeated items
  rpc GetArray(ArrayID) returns (Repeated{{ dtype | capitalize }});

  // Send an array by combining streaming and repeated items
  rpc GetArrayChunked(StreamRequest) returns (stream Repeated{{ dtype | capitalize }});

  // Send an array as a simple stream of messages
  rpc GetArrayStreaming(ArrayID) returns (stream {{ dtype | capitalize }});

  // Send a stream of byte payloads containing the array
  rpc GetArrayBinaryChunked(StreamRequest) returns (stream BinaryChunk);
}

// End Section {{ dtype | upper }}

{% endfor %}
