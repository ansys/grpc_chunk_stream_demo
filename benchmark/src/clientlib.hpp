#pragma once

#include <vector>
#include <memory>

#include <grpcpp/grpcpp.h>

// autogenerated
#include "send_array.grpc.pb.h"

#include "types_lookup.hpp"

namespace send_array {

template <typename GrpcType>
class SendArrayClient {
    private:
        using data_type = typename TypesLookup<GrpcType>::data_type;
        using repeated_type = typename TypesLookup<GrpcType>::repeated_type;

        std::unique_ptr<typename GrpcType::Stub> stub_;
    public:
        SendArrayClient(
            std::shared_ptr<grpc::Channel> channel
        ): stub_(GrpcType::NewStub(channel)){}

        void PopulateArray(const std::vector<data_type> & array) {
            repeated_type request;
            request.mutable_payload()->Add(array.cbegin(), array.cend());
            Empty response;
            grpc::ClientContext context;
            auto status = stub_->PopulateArray(&context, request, &response);
        }

        void ClearArrays() {
            Empty request, response;
            grpc::ClientContext context;
            auto status = stub_->ClearArrays(&context, request, &response);
        }
};

}
