/*
 *
 */

#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include <grpcpp/grpcpp.h>

// autogenerated
#include "chunkdemo.grpc.pb.h"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::Status;
using grpc::ServerWriter;

using chunkdemo::ChunkDemo;
using chunkdemo::Chunk;
using chunkdemo::StreamRequest;
using chunkdemo::DataType;
using chunkdemo::RepeatedInts;
using chunkdemo::Empty;
using chunkdemo::PopulateArrayRequest;

#define DEFAULT_CHUNKSIZE 256*1024  // 256 kBps

void StrToVal( std::string strVal, int &ival) { ival = std::stoi( strVal);}
void StrToVal( std::string strVal, double &dval) { dval = std::stof( strVal);}
void StrToVal( std::string strVal, std::string &sval) { sval = strVal;}


template <typename T> T
GetMetadataValue( ServerContext* context, std::string name, T DefaultValue)
{
  T Val = DefaultValue;

  auto mapMetaData = context->client_metadata();
  auto iterMetaData = mapMetaData.find( name);

  if ( iterMetaData != mapMetaData.end())
    {
      std::string	strVal = iterMetaData->second.data();
      StrToVal( strVal, Val);
    }

  return Val;
}


// stream a series of chunks
inline void StreamChunks(ServerWriter<Chunk>* writer, int chunk_size,
			 const void* array, int n_bytes){
  char* bytes = (char*) array;

  Chunk chunk;
  for (int c = 0; c < n_bytes; c += chunk_size) {
    if (c + chunk_size > n_bytes) { // last chunk, send up to the end of the array
      chunk.set_payload(&bytes[c], n_bytes - c);
      writer->Write(chunk);
    }
    else {  // Send max chunk size (chunk_size)
      chunk.set_payload(&bytes[c], chunk_size);
      writer->Write(chunk);
    }
  }
}

template int GetMetadataValue<int>(ServerContext* context, std::string name,
				   int DefaultValue);
template double GetMetadataValue<double>(ServerContext* context, std::string name,
					 double DefaultValue);


// Logic and data behind the server's behavior.
class ChunkServiceImpl final : public ChunkDemo::Service {

  // Array to send to client
  int *array;
  int array_size;
  std::vector<int> int_vec__;

  Status PopulateArray(ServerContext* context,
		       const PopulateArrayRequest* request,
		       Empty* writer) override{

    this->array_size = request->array_size();
    // std::cout << "Populated an int array with " << this->array_size
	      // << " ints" << std::endl;
    this->array = new int[this->array_size];
    int_vec__.clear();
    for (int i=0; i<this->array_size; i++){
      array[i] = i;
      int_vec__.push_back(i);
    }

    return Status::OK;
  }



  // Send an array back using a stream of byte chunks
  Status DownloadArray(ServerContext* context, const StreamRequest* request,
		       ServerWriter<Chunk>* writer) override {

    // populate metadata
    context->AddInitialMetadata("size", std::to_string(this->array_size));
    context->AddInitialMetadata("datatype", "INT32");

    // Stream the array
    int n_bytes = this->array_size*sizeof(int);
    int chunk_size = GetMetadataValue<int>(context, "chunk_size", DEFAULT_CHUNKSIZE);
    StreamChunks(writer, chunk_size, array, n_bytes);

    return Status::OK;
  }

  Status DownloadArrayChunkedRepeated(
    ServerContext *context,
    const StreamRequest *request,
    ServerWriter<RepeatedInts> *writer
  ) override {
      // Stream the array
      int n_bytes = this->array_size * sizeof(int);
      int chunk_size =
          GetMetadataValue<int>(context, "chunk_size", DEFAULT_CHUNKSIZE / 4);
      RepeatedInts chunk;

      // Send data
      for (auto it = int_vec__.begin(); it <= int_vec__.end();
           std::advance(it, chunk_size)) {
          chunk.mutable_ints()->Clear();
          chunk.mutable_ints()->Add(it,
                                    std::min(it + chunk_size, int_vec__.end()));
          writer->Write(chunk);
      }

      return Status::OK;
  }

  Status DownloadArraySlow(ServerContext* context, const StreamRequest* request,
			   RepeatedInts* writer) override{

    // Send data
    writer->mutable_ints()->Add(int_vec__.begin(), int_vec__.end());

    return Status::OK;
  }


}; // Server


void RunServer() {
  std::string server_address("0.0.0.0:50000");
  ChunkServiceImpl service;

  ServerBuilder builder;
  // Listen on the given address without any authentication mechanism.
  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
  // Register "service" as the instance through which we'll communicate with
  // clients. In this case it corresponds to an *synchronous* service.
  builder.RegisterService(&service);
  // Finally assemble the server.
  std::unique_ptr<Server> server(builder.BuildAndStart());
  std::cout << "Server listening on " << server_address << std::endl;

  // Wait for the server to shutdown. Note that some other thread must be
  // responsible for shutting down the server for this call to ever return.
  server->Wait();
}

int main(int argc, char** argv) {
  RunServer();
  return 0;
}
